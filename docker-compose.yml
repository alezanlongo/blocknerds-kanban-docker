version: "3.2"
services:
   nginx:
      depends_on:
         - pgsql
         - php
      restart: always
      build:
        dockerfile: Dockerfile
        context: ./nginx
      environment:
         TZ: America/Argentina/Buenos_Aires
      ports:
         - '8081:81' # localhost:8081 frontend
         - '8082:82' # localhost:8082 backend

      volumes:
         - ./files:/var/www/html/
      container_name: bocknerds_ngnix
   pgsql:
      build:
         dockerfile: Dockerfile
         context: ./pgsql
      restart: always
      environment:
         POSTGRES_USER: "root"
         POSTGRES_PASSWORD: "root"
         POSTGRES_DB: "test"
      ports:
         - '5432:5432'
      volumes:
         - "./var/lib/pgdata:/var/lib/postgresql/data"
      container_name: bocknerds_pgsql
   php:
      depends_on:
         - redis
         - mail
#         - selenium-hub
         - rabbitmq
      restart: always
      build:
         dockerfile: Dockerfile
         context: ./php
         args:
            UID: 1000
            GID: 1000
      ports:
         - '9002:9000'
         #- '8087:8087' #used for Ratchet socket connection
      volumes:
         - "./files:/var/www/html/"
      container_name: bocknerds_php
   redis:
      build:
         dockerfile: Dockerfile
         context: ./redis
      ports:
         - '6379:6379'
      container_name: bocknerds_redis
   mail:
      build:
         dockerfile: Dockerfile
         context: ./mailhog
      logging:
         driver: 'none'
      ports:
         - 1025:1025 # smtp server
         - 8025:8025 # localhost:8025 web
#   selenium-hub:
#      image: selenium/hub
#      container_name: selenium-hub
#      ports:
#         - "4442:4442"
#         - "4443:4443"
#         - "4444:4444"
   rabbitmq:
      build:
         dockerfile: Dockerfile
         context: ./rabbitmq
      restart: unless-stopped
      environment:
         TZ: America/Argentina/Buenos_Aires
      ports:
         - '5672:5672'
         - '15675:15675' #web MQTT
         - '1883:1883' # MQTT
         - '15692:15692'
      container_name: bocknerds_rabbitmq
   elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
#    networks:
#      - elk
   logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#    networks:
#      - elk
    depends_on:
      - elasticsearch
   kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
#    networks:
#      - elk
    depends_on:
      - elasticsearch
#networks:
#  elk:
#    driver: bridge
volumes:
  elasticsearch:      
      
